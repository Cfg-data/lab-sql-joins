USE sakila

-- 1. List the number of films per category
SELECT c.name AS category_name, COUNT(f.film_id) AS num_films
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name;

-- 2. Retrieve the store ID, city, and country for each store
SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category
SELECT c.name AS category_name, AVG(f.length) AS avg_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name;

-- Bonus: Identify the film categories with the longest average running time
SELECT c.name AS category_name, AVG(f.length) AS avg_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_length DESC;

-- 5. Display the top 10 most frequently rented movies in descending order
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- 6. Determine if "Academy Dinosaur" can be rented from Store 1
SELECT f.title, i.inventory_id, s.store_id, 
       CASE 
           WHEN i.inventory_id IS NOT NULL THEN 'Available'
           ELSE 'Not Available' 
       END AS availability
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN store s ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;

-- 7. Provide a list of all distinct film titles, along with their availability status in the inventory
SELECT f.title, 
       CASE 
           WHEN IFNULL(i.inventory_id, 0) = 0 THEN 'NOT Available'
           ELSE 'Available' 
       END AS availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id;

-- 8. List the number of films that have been released
SELECT COUNT(f.film_id) AS total_films
FROM film f;

-- 9. List the number of films per rating
SELECT f.rating, COUNT(f.film_id) AS num_films
FROM film f
GROUP BY f.rating;

-- 10. List the number of films per rating, sorted by the number of films in descending order
SELECT f.rating, COUNT(f.film_id) AS num_films
FROM film f
GROUP BY f.rating
ORDER BY num_films DESC;

-- 11. Determine the mean film duration for each rating
SELECT f.rating, ROUND(AVG(f.length), 2) AS avg_duration
FROM film f
GROUP BY f.rating;

-- 12. Identify which ratings have a mean duration of over two hours
SELECT f.rating, ROUND(AVG(f.length), 2) AS avg_duration
FROM film f
GROUP BY f.rating
HAVING AVG(f.length) > 120;

-- Bonus: Determine which last names are not repeated in the actor table
SELECT a.last_name
FROM actor a
GROUP BY a.last_name
HAVING COUNT(a.last_name) = 1;
